version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: rental-house-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: rental_house
      MYSQL_USER: rental_user
      MYSQL_PASSWORD: rental_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database-migration.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rental-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Spring Boot Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rental-house-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Database configuration
      DB_URL: jdbc:mysql://mysql:3306/rental_house?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      DB_USERNAME: rental_user
      DB_PASSWORD: rental_password
      
      # JWT configuration
      JWT_SECRET_KEY: your-super-secret-jwt-key-change-in-production
      
      # Email configuration (update with your email settings)
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USERNAME: your-email@gmail.com
      EMAIL_PASSWORD: your-app-password
      
      # App configuration
      APP_BASE_URL: http://localhost:8080
      
      # File upload configuration
      FILE_UPLOAD_PATH: uploads/
      
      # Google OAuth (update with your Google API credentials)
      GOOGLE_OAUTH_CLIENT_ID: your-google-client-id
      GOOGLE_API_KEY: your-google-api-key
      
      # Spring profiles
      SPRING_PROFILES_ACTIVE: prod
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - rental-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  mysql_data:
    driver: local
  uploads_data:
    driver: local

networks:
  rental-network:
    driver: bridge

